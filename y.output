Terminals unused in grammar

   UMINUS


Rules useless in parser due to conflicts

   10 declaration: /* empty */


State 4 conflicts: 7 shift/reduce, 6 reduce/reduce
State 34 conflicts: 3 reduce/reduce
State 35 conflicts: 3 reduce/reduce
State 37 conflicts: 3 reduce/reduce
State 38 conflicts: 3 reduce/reduce
State 44 conflicts: 3 reduce/reduce
State 46 conflicts: 3 reduce/reduce
State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 6 shift/reduce
State 50 conflicts: 2 shift/reduce
State 51 conflicts: 2 shift/reduce
State 52 conflicts: 1 shift/reduce
State 53 conflicts: 3 reduce/reduce
State 54 conflicts: 3 reduce/reduce
State 87 conflicts: 1 shift/reduce
State 94 conflicts: 16 reduce/reduce
State 97 conflicts: 16 reduce/reduce
State 98 conflicts: 16 reduce/reduce
State 99 conflicts: 16 reduce/reduce
State 100 conflicts: 16 reduce/reduce
State 101 conflicts: 16 reduce/reduce
State 102 conflicts: 16 reduce/reduce
State 103 conflicts: 16 reduce/reduce
State 104 conflicts: 16 reduce/reduce
State 105 conflicts: 16 reduce/reduce
State 106 conflicts: 16 reduce/reduce
State 107 conflicts: 16 reduce/reduce
State 108 conflicts: 1 shift/reduce, 15 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | /* empty */

    5 statements: statements statement
    6           | /* empty */

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'
   10            | /* empty */

   11 statement: variable '=' expression ';'
   12          | IF '(' expression ')' statement else_statement
   13          | WHILE '(' expression ')' statement
   14          | scope
   15          | ';'

   16 else_statement: ELSE statement
   17               | /* empty */

   18 type: INT_T
   19     | IVEC_T
   20     | BOOL_T
   21     | BVEC_T
   22     | FLOAT_T
   23     | VEC_T

   24 expression: expr1
   25           | constructor
   26           | function
   27           | INT_C
   28           | FLOAT_C
   29           | variable
   30           | unary_op expression
   31           | TRUE_C
   32           | FALSE_C
   33           | '(' expression ')'

   34 variable: ID
   35         | ID '[' INT_C ']'

   36 unary_op: '!'
   37         | '-'

   38 expr1: expr2 OR expr2
   39      | expr2

   40 expr2: expr3 AND expr3
   41      | expr3

   42 expr3: expr4 EQ expr4
   43      | expr4 LEQ expr4
   44      | expr4 '<' expr4
   45      | expr4 GEQ expr4
   46      | expr4 '>' expr4
   47      | expr4 NEQ expr4
   48      | expr4

   49 expr4: term '+' term
   50      | term '-' term
   51      | term

   52 term: factor '*' factor
   53     | factor '/' factor
   54     | factor

   55 factor: expr5 '^' expr5
   56       | expr5

   57 expr5: INT_C
   58      | FLOAT_C
   59      | TRUE_C
   60      | FALSE_C
   61      | expr1
   62      | function
   63      | variable
   64      | constructor

   65 constructor: type '(' arguments ')'

   66 function: function_name '(' arguments_opt ')'

   67 function_name: FUNC

   68 arguments_opt: arguments
   69              | /* empty */

   70 arguments: arguments ',' expression
   71          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33) 36
'(' (40) 12 13 33 65 66
')' (41) 12 13 33 65 66
'*' (42) 52
'+' (43) 49
',' (44) 70
'-' (45) 37 50
'/' (47) 53
';' (59) 7 8 9 11 15
'<' (60) 44
'=' (61) 8 9 11
'>' (62) 46
'[' (91) 35
']' (93) 35
'^' (94) 55
'{' (123) 2
'}' (125) 2
error (256)
FLOAT_T (258) 22
INT_T (259) 18
BOOL_T (260) 20
CONST (261) 9
FALSE_C (262) 32 60
TRUE_C (263) 31 59
FUNC (264) 67
IF (265) 12
WHILE (266) 13
ELSE (267) 16
AND (268) 40
OR (269) 38
NEQ (270) 47
EQ (271) 42
LEQ (272) 43
GEQ (273) 45
VEC_T (274) 23
BVEC_T (275) 21
IVEC_T (276) 19
FLOAT_C (277) 28 58
INT_C (278) 27 35 57
ID (279) 7 8 9 34 35
UMINUS (280)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
scope (45)
    on left: 2, on right: 1 14
declarations (46)
    on left: 3 4, on right: 2 3
statements (47)
    on left: 5 6, on right: 2 5
declaration (48)
    on left: 7 8 9 10, on right: 3
statement (49)
    on left: 11 12 13 14 15, on right: 5 12 13 16
else_statement (50)
    on left: 16 17, on right: 12
type (51)
    on left: 18 19 20 21 22 23, on right: 7 8 9 65
expression (52)
    on left: 24 25 26 27 28 29 30 31 32 33, on right: 8 9 11 12 13
    30 33 70 71
variable (53)
    on left: 34 35, on right: 11 29 63
unary_op (54)
    on left: 36 37, on right: 30
expr1 (55)
    on left: 38 39, on right: 24 61
expr2 (56)
    on left: 40 41, on right: 38 39
expr3 (57)
    on left: 42 43 44 45 46 47 48, on right: 40 41
expr4 (58)
    on left: 49 50 51, on right: 42 43 44 45 46 47 48
term (59)
    on left: 52 53 54, on right: 49 50 51
factor (60)
    on left: 55 56, on right: 52 53 54
expr5 (61)
    on left: 57 58 59 60 61 62 63 64, on right: 55 56
constructor (62)
    on left: 65, on right: 25 64
function (63)
    on left: 66, on right: 26 62
function_name (64)
    on left: 67, on right: 66
arguments_opt (65)
    on left: 68 69, on right: 66
arguments (66)
    on left: 70 71, on right: 65 68 70


state 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


state 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: scope .

    $default  reduce using rule 1 (program)


state 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    FLOAT_T   [reduce using rule 10 (declaration)]
    INT_T     [reduce using rule 10 (declaration)]
    BOOL_T    [reduce using rule 10 (declaration)]
    CONST     [reduce using rule 10 (declaration)]
    IF        reduce using rule 6 (statements)
    IF        [reduce using rule 10 (declaration)]
    WHILE     reduce using rule 6 (statements)
    WHILE     [reduce using rule 10 (declaration)]
    VEC_T     [reduce using rule 10 (declaration)]
    BVEC_T    [reduce using rule 10 (declaration)]
    IVEC_T    [reduce using rule 10 (declaration)]
    ID        reduce using rule 6 (statements)
    ID        [reduce using rule 10 (declaration)]
    '{'       reduce using rule 6 (statements)
    '{'       [reduce using rule 10 (declaration)]
    '}'       reduce using rule 6 (statements)
    '}'       [reduce using rule 10 (declaration)]
    ';'       reduce using rule 6 (statements)
    ';'       [reduce using rule 10 (declaration)]
    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


state 5

    0 $accept: program $end .

    $default  accept


state 6

   22 type: FLOAT_T .

    $default  reduce using rule 22 (type)


state 7

   18 type: INT_T .

    $default  reduce using rule 18 (type)


state 8

   20 type: BOOL_T .

    $default  reduce using rule 20 (type)


state 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


state 10

   23 type: VEC_T .

    $default  reduce using rule 23 (type)


state 11

   21 type: BVEC_T .

    $default  reduce using rule 21 (type)


state 12

   19 type: IVEC_T .

    $default  reduce using rule 19 (type)


state 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


state 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 15

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


state 16

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 26


state 17

   12 statement: IF . '(' expression ')' statement else_statement

    '('  shift, and go to state 27


state 18

   13 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


state 19

   34 variable: ID .
   35         | ID . '[' INT_C ']'

    '['  shift, and go to state 29

    $default  reduce using rule 34 (variable)


state 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


state 21

   15 statement: ';' .

    $default  reduce using rule 15 (statement)


state 22

   14 statement: scope .

    $default  reduce using rule 14 (statement)


state 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


state 24

   11 statement: variable . '=' expression ';'

    '='  shift, and go to state 30


state 25

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    ';'  shift, and go to state 31
    '='  shift, and go to state 32


state 26

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 33


state 27

   12 statement: IF '(' . expression ')' statement else_statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 43
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 28

   13 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 56
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 29

   35 variable: ID '[' . INT_C ']'

    INT_C  shift, and go to state 57


state 30

   11 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 58
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 31

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


state 32

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 59
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 33

    9 declaration: CONST type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 60
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 34

   32 expression: FALSE_C .
   60 expr5: FALSE_C .

    ';'       reduce using rule 32 (expression)
    ';'       [reduce using rule 60 (expr5)]
    ')'       reduce using rule 32 (expression)
    ')'       [reduce using rule 60 (expr5)]
    ','       reduce using rule 32 (expression)
    ','       [reduce using rule 60 (expr5)]
    $default  reduce using rule 60 (expr5)


state 35

   31 expression: TRUE_C .
   59 expr5: TRUE_C .

    ';'       reduce using rule 31 (expression)
    ';'       [reduce using rule 59 (expr5)]
    ')'       reduce using rule 31 (expression)
    ')'       [reduce using rule 59 (expr5)]
    ','       reduce using rule 31 (expression)
    ','       [reduce using rule 59 (expr5)]
    $default  reduce using rule 59 (expr5)


state 36

   67 function_name: FUNC .

    $default  reduce using rule 67 (function_name)


state 37

   28 expression: FLOAT_C .
   58 expr5: FLOAT_C .

    ';'       reduce using rule 28 (expression)
    ';'       [reduce using rule 58 (expr5)]
    ')'       reduce using rule 28 (expression)
    ')'       [reduce using rule 58 (expr5)]
    ','       reduce using rule 28 (expression)
    ','       [reduce using rule 58 (expr5)]
    $default  reduce using rule 58 (expr5)


state 38

   27 expression: INT_C .
   57 expr5: INT_C .

    ';'       reduce using rule 27 (expression)
    ';'       [reduce using rule 57 (expr5)]
    ')'       reduce using rule 27 (expression)
    ')'       [reduce using rule 57 (expr5)]
    ','       reduce using rule 27 (expression)
    ','       [reduce using rule 57 (expr5)]
    $default  reduce using rule 57 (expr5)


state 39

   37 unary_op: '-' .

    $default  reduce using rule 37 (unary_op)


state 40

   36 unary_op: '!' .

    $default  reduce using rule 36 (unary_op)


state 41

   33 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 61
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 42

   65 constructor: type . '(' arguments ')'

    '('  shift, and go to state 62


state 43

   12 statement: IF '(' expression . ')' statement else_statement

    ')'  shift, and go to state 63


state 44

   29 expression: variable .
   63 expr5: variable .

    ';'       reduce using rule 29 (expression)
    ';'       [reduce using rule 63 (expr5)]
    ')'       reduce using rule 29 (expression)
    ')'       [reduce using rule 63 (expr5)]
    ','       reduce using rule 29 (expression)
    ','       [reduce using rule 63 (expr5)]
    $default  reduce using rule 63 (expr5)


state 45

   30 expression: unary_op . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 64
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 46

   24 expression: expr1 .
   61 expr5: expr1 .

    ';'       reduce using rule 24 (expression)
    ';'       [reduce using rule 61 (expr5)]
    ')'       reduce using rule 24 (expression)
    ')'       [reduce using rule 61 (expr5)]
    ','       reduce using rule 24 (expression)
    ','       [reduce using rule 61 (expr5)]
    $default  reduce using rule 61 (expr5)


state 47

   38 expr1: expr2 . OR expr2
   39      | expr2 .

    OR  shift, and go to state 65

    OR        [reduce using rule 39 (expr1)]
    $default  reduce using rule 39 (expr1)


state 48

   40 expr2: expr3 . AND expr3
   41      | expr3 .

    AND  shift, and go to state 66

    AND       [reduce using rule 41 (expr2)]
    $default  reduce using rule 41 (expr2)


state 49

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   48      | expr4 .

    NEQ  shift, and go to state 67
    EQ   shift, and go to state 68
    LEQ  shift, and go to state 69
    GEQ  shift, and go to state 70
    '<'  shift, and go to state 71
    '>'  shift, and go to state 72

    NEQ       [reduce using rule 48 (expr3)]
    EQ        [reduce using rule 48 (expr3)]
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       [reduce using rule 48 (expr3)]
    '<'       [reduce using rule 48 (expr3)]
    '>'       [reduce using rule 48 (expr3)]
    $default  reduce using rule 48 (expr3)


state 50

   49 expr4: term . '+' term
   50      | term . '-' term
   51      | term .

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74

    '+'       [reduce using rule 51 (expr4)]
    '-'       [reduce using rule 51 (expr4)]
    $default  reduce using rule 51 (expr4)


state 51

   52 term: factor . '*' factor
   53     | factor . '/' factor
   54     | factor .

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76

    '*'       [reduce using rule 54 (term)]
    '/'       [reduce using rule 54 (term)]
    $default  reduce using rule 54 (term)


state 52

   55 factor: expr5 . '^' expr5
   56       | expr5 .

    '^'  shift, and go to state 77

    '^'       [reduce using rule 56 (factor)]
    $default  reduce using rule 56 (factor)


state 53

   25 expression: constructor .
   64 expr5: constructor .

    ';'       reduce using rule 25 (expression)
    ';'       [reduce using rule 64 (expr5)]
    ')'       reduce using rule 25 (expression)
    ')'       [reduce using rule 64 (expr5)]
    ','       reduce using rule 25 (expression)
    ','       [reduce using rule 64 (expr5)]
    $default  reduce using rule 64 (expr5)


state 54

   26 expression: function .
   62 expr5: function .

    ';'       reduce using rule 26 (expression)
    ';'       [reduce using rule 62 (expr5)]
    ')'       reduce using rule 26 (expression)
    ')'       [reduce using rule 62 (expr5)]
    ','       reduce using rule 26 (expression)
    ','       [reduce using rule 62 (expr5)]
    $default  reduce using rule 62 (expr5)


state 55

   66 function: function_name . '(' arguments_opt ')'

    '('  shift, and go to state 78


state 56

   13 statement: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 79


state 57

   35 variable: ID '[' INT_C . ']'

    ']'  shift, and go to state 80


state 58

   11 statement: variable '=' expression . ';'

    ';'  shift, and go to state 81


state 59

    8 declaration: type ID '=' expression . ';'

    ';'  shift, and go to state 82


state 60

    9 declaration: CONST type ID '=' expression . ';'

    ';'  shift, and go to state 83


state 61

   33 expression: '(' expression . ')'

    ')'  shift, and go to state 84


state 62

   65 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 85
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55
    arguments      go to state 86


state 63

   12 statement: IF '(' expression ')' . statement else_statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 87
    variable   go to state 24


state 64

   30 expression: unary_op expression .

    $default  reduce using rule 30 (expression)


state 65

   38 expr1: expr2 OR . expr2

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 94
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 66

   40 expr2: expr3 AND . expr3

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 97
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 67

   47 expr3: expr4 NEQ . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 98
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 68

   42 expr3: expr4 EQ . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 99
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 69

   43 expr3: expr4 LEQ . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 100
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 70

   45 expr3: expr4 GEQ . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 101
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 71

   44 expr3: expr4 '<' . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 102
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 72

   46 expr3: expr4 '>' . expr4

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 103
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 73

   49 expr4: term '+' . term

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 104
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 74

   50 expr4: term '-' . term

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 105
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 75

   52 term: factor '*' . factor

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 106
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 76

   53 term: factor '/' . factor

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 107
    expr5          go to state 52
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 77

   55 factor: expr5 '^' . expr5

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 88
    TRUE_C   shift, and go to state 89
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 90
    INT_C    shift, and go to state 91
    ID       shift, and go to state 19

    type           go to state 42
    variable       go to state 92
    expr1          go to state 93
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 108
    constructor    go to state 95
    function       go to state 96
    function_name  go to state 55


state 78

   66 function: function_name '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 69 (arguments_opt)

    type           go to state 42
    expression     go to state 85
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55
    arguments_opt  go to state 109
    arguments      go to state 110


state 79

   13 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 111
    variable   go to state 24


state 80

   35 variable: ID '[' INT_C ']' .

    $default  reduce using rule 35 (variable)


state 81

   11 statement: variable '=' expression ';' .

    $default  reduce using rule 11 (statement)


state 82

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


state 83

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


state 84

   33 expression: '(' expression ')' .

    $default  reduce using rule 33 (expression)


state 85

   71 arguments: expression .

    $default  reduce using rule 71 (arguments)


state 86

   65 constructor: type '(' arguments . ')'
   70 arguments: arguments . ',' expression

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


state 87

   12 statement: IF '(' expression ')' statement . else_statement

    ELSE  shift, and go to state 114

    ELSE      [reduce using rule 17 (else_statement)]
    $default  reduce using rule 17 (else_statement)

    else_statement  go to state 115


state 88

   60 expr5: FALSE_C .

    $default  reduce using rule 60 (expr5)


state 89

   59 expr5: TRUE_C .

    $default  reduce using rule 59 (expr5)


state 90

   58 expr5: FLOAT_C .

    $default  reduce using rule 58 (expr5)


state 91

   57 expr5: INT_C .

    $default  reduce using rule 57 (expr5)


state 92

   63 expr5: variable .

    $default  reduce using rule 63 (expr5)


state 93

   61 expr5: expr1 .

    $default  reduce using rule 61 (expr5)


state 94

   38 expr1: expr2 . OR expr2
   38      | expr2 OR expr2 .
   39      | expr2 .

    AND       reduce using rule 38 (expr1)
    AND       [reduce using rule 39 (expr1)]
    OR        reduce using rule 38 (expr1)
    OR        [reduce using rule 39 (expr1)]
    NEQ       reduce using rule 38 (expr1)
    NEQ       [reduce using rule 39 (expr1)]
    EQ        reduce using rule 38 (expr1)
    EQ        [reduce using rule 39 (expr1)]
    LEQ       reduce using rule 38 (expr1)
    LEQ       [reduce using rule 39 (expr1)]
    GEQ       reduce using rule 38 (expr1)
    GEQ       [reduce using rule 39 (expr1)]
    '<'       reduce using rule 38 (expr1)
    '<'       [reduce using rule 39 (expr1)]
    '>'       reduce using rule 38 (expr1)
    '>'       [reduce using rule 39 (expr1)]
    '+'       reduce using rule 38 (expr1)
    '+'       [reduce using rule 39 (expr1)]
    '-'       reduce using rule 38 (expr1)
    '-'       [reduce using rule 39 (expr1)]
    '*'       reduce using rule 38 (expr1)
    '*'       [reduce using rule 39 (expr1)]
    '/'       reduce using rule 38 (expr1)
    '/'       [reduce using rule 39 (expr1)]
    '^'       reduce using rule 38 (expr1)
    '^'       [reduce using rule 39 (expr1)]
    ';'       reduce using rule 38 (expr1)
    ';'       [reduce using rule 39 (expr1)]
    ')'       reduce using rule 38 (expr1)
    ')'       [reduce using rule 39 (expr1)]
    ','       reduce using rule 38 (expr1)
    ','       [reduce using rule 39 (expr1)]
    $default  reduce using rule 38 (expr1)


state 95

   64 expr5: constructor .

    $default  reduce using rule 64 (expr5)


state 96

   62 expr5: function .

    $default  reduce using rule 62 (expr5)


state 97

   40 expr2: expr3 . AND expr3
   40      | expr3 AND expr3 .
   41      | expr3 .

    AND       reduce using rule 40 (expr2)
    AND       [reduce using rule 41 (expr2)]
    OR        reduce using rule 40 (expr2)
    OR        [reduce using rule 41 (expr2)]
    NEQ       reduce using rule 40 (expr2)
    NEQ       [reduce using rule 41 (expr2)]
    EQ        reduce using rule 40 (expr2)
    EQ        [reduce using rule 41 (expr2)]
    LEQ       reduce using rule 40 (expr2)
    LEQ       [reduce using rule 41 (expr2)]
    GEQ       reduce using rule 40 (expr2)
    GEQ       [reduce using rule 41 (expr2)]
    '<'       reduce using rule 40 (expr2)
    '<'       [reduce using rule 41 (expr2)]
    '>'       reduce using rule 40 (expr2)
    '>'       [reduce using rule 41 (expr2)]
    '+'       reduce using rule 40 (expr2)
    '+'       [reduce using rule 41 (expr2)]
    '-'       reduce using rule 40 (expr2)
    '-'       [reduce using rule 41 (expr2)]
    '*'       reduce using rule 40 (expr2)
    '*'       [reduce using rule 41 (expr2)]
    '/'       reduce using rule 40 (expr2)
    '/'       [reduce using rule 41 (expr2)]
    '^'       reduce using rule 40 (expr2)
    '^'       [reduce using rule 41 (expr2)]
    ';'       reduce using rule 40 (expr2)
    ';'       [reduce using rule 41 (expr2)]
    ')'       reduce using rule 40 (expr2)
    ')'       [reduce using rule 41 (expr2)]
    ','       reduce using rule 40 (expr2)
    ','       [reduce using rule 41 (expr2)]
    $default  reduce using rule 40 (expr2)


state 98

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   47      | expr4 NEQ expr4 .
   48      | expr4 .

    AND       reduce using rule 47 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 47 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 47 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 47 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 47 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 47 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 47 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 47 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 47 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 47 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 47 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 47 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 47 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 47 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 47 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 47 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 47 (expr3)


state 99

   42 expr3: expr4 . EQ expr4
   42      | expr4 EQ expr4 .
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   48      | expr4 .

    AND       reduce using rule 42 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 42 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 42 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 42 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 42 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 42 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 42 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 42 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 42 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 42 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 42 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 42 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 42 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 42 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 42 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 42 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 42 (expr3)


state 100

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   43      | expr4 LEQ expr4 .
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   48      | expr4 .

    AND       reduce using rule 43 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 43 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 43 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 43 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 43 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 43 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 43 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 43 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 43 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 43 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 43 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 43 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 43 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 43 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 43 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 43 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 43 (expr3)


state 101

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   45      | expr4 GEQ expr4 .
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   48      | expr4 .

    AND       reduce using rule 45 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 45 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 45 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 45 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 45 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 45 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 45 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 45 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 45 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 45 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 45 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 45 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 45 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 45 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 45 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 45 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 45 (expr3)


state 102

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   44      | expr4 '<' expr4 .
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   47      | expr4 . NEQ expr4
   48      | expr4 .

    AND       reduce using rule 44 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 44 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 44 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 44 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 44 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 44 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 44 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 44 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 44 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 44 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 44 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 44 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 44 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 44 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 44 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 44 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 44 (expr3)


state 103

   42 expr3: expr4 . EQ expr4
   43      | expr4 . LEQ expr4
   44      | expr4 . '<' expr4
   45      | expr4 . GEQ expr4
   46      | expr4 . '>' expr4
   46      | expr4 '>' expr4 .
   47      | expr4 . NEQ expr4
   48      | expr4 .

    AND       reduce using rule 46 (expr3)
    AND       [reduce using rule 48 (expr3)]
    OR        reduce using rule 46 (expr3)
    OR        [reduce using rule 48 (expr3)]
    NEQ       reduce using rule 46 (expr3)
    NEQ       [reduce using rule 48 (expr3)]
    EQ        reduce using rule 46 (expr3)
    EQ        [reduce using rule 48 (expr3)]
    LEQ       reduce using rule 46 (expr3)
    LEQ       [reduce using rule 48 (expr3)]
    GEQ       reduce using rule 46 (expr3)
    GEQ       [reduce using rule 48 (expr3)]
    '<'       reduce using rule 46 (expr3)
    '<'       [reduce using rule 48 (expr3)]
    '>'       reduce using rule 46 (expr3)
    '>'       [reduce using rule 48 (expr3)]
    '+'       reduce using rule 46 (expr3)
    '+'       [reduce using rule 48 (expr3)]
    '-'       reduce using rule 46 (expr3)
    '-'       [reduce using rule 48 (expr3)]
    '*'       reduce using rule 46 (expr3)
    '*'       [reduce using rule 48 (expr3)]
    '/'       reduce using rule 46 (expr3)
    '/'       [reduce using rule 48 (expr3)]
    '^'       reduce using rule 46 (expr3)
    '^'       [reduce using rule 48 (expr3)]
    ';'       reduce using rule 46 (expr3)
    ';'       [reduce using rule 48 (expr3)]
    ')'       reduce using rule 46 (expr3)
    ')'       [reduce using rule 48 (expr3)]
    ','       reduce using rule 46 (expr3)
    ','       [reduce using rule 48 (expr3)]
    $default  reduce using rule 46 (expr3)


state 104

   49 expr4: term . '+' term
   49      | term '+' term .
   50      | term . '-' term
   51      | term .

    AND       reduce using rule 49 (expr4)
    AND       [reduce using rule 51 (expr4)]
    OR        reduce using rule 49 (expr4)
    OR        [reduce using rule 51 (expr4)]
    NEQ       reduce using rule 49 (expr4)
    NEQ       [reduce using rule 51 (expr4)]
    EQ        reduce using rule 49 (expr4)
    EQ        [reduce using rule 51 (expr4)]
    LEQ       reduce using rule 49 (expr4)
    LEQ       [reduce using rule 51 (expr4)]
    GEQ       reduce using rule 49 (expr4)
    GEQ       [reduce using rule 51 (expr4)]
    '<'       reduce using rule 49 (expr4)
    '<'       [reduce using rule 51 (expr4)]
    '>'       reduce using rule 49 (expr4)
    '>'       [reduce using rule 51 (expr4)]
    '+'       reduce using rule 49 (expr4)
    '+'       [reduce using rule 51 (expr4)]
    '-'       reduce using rule 49 (expr4)
    '-'       [reduce using rule 51 (expr4)]
    '*'       reduce using rule 49 (expr4)
    '*'       [reduce using rule 51 (expr4)]
    '/'       reduce using rule 49 (expr4)
    '/'       [reduce using rule 51 (expr4)]
    '^'       reduce using rule 49 (expr4)
    '^'       [reduce using rule 51 (expr4)]
    ';'       reduce using rule 49 (expr4)
    ';'       [reduce using rule 51 (expr4)]
    ')'       reduce using rule 49 (expr4)
    ')'       [reduce using rule 51 (expr4)]
    ','       reduce using rule 49 (expr4)
    ','       [reduce using rule 51 (expr4)]
    $default  reduce using rule 49 (expr4)


state 105

   49 expr4: term . '+' term
   50      | term . '-' term
   50      | term '-' term .
   51      | term .

    AND       reduce using rule 50 (expr4)
    AND       [reduce using rule 51 (expr4)]
    OR        reduce using rule 50 (expr4)
    OR        [reduce using rule 51 (expr4)]
    NEQ       reduce using rule 50 (expr4)
    NEQ       [reduce using rule 51 (expr4)]
    EQ        reduce using rule 50 (expr4)
    EQ        [reduce using rule 51 (expr4)]
    LEQ       reduce using rule 50 (expr4)
    LEQ       [reduce using rule 51 (expr4)]
    GEQ       reduce using rule 50 (expr4)
    GEQ       [reduce using rule 51 (expr4)]
    '<'       reduce using rule 50 (expr4)
    '<'       [reduce using rule 51 (expr4)]
    '>'       reduce using rule 50 (expr4)
    '>'       [reduce using rule 51 (expr4)]
    '+'       reduce using rule 50 (expr4)
    '+'       [reduce using rule 51 (expr4)]
    '-'       reduce using rule 50 (expr4)
    '-'       [reduce using rule 51 (expr4)]
    '*'       reduce using rule 50 (expr4)
    '*'       [reduce using rule 51 (expr4)]
    '/'       reduce using rule 50 (expr4)
    '/'       [reduce using rule 51 (expr4)]
    '^'       reduce using rule 50 (expr4)
    '^'       [reduce using rule 51 (expr4)]
    ';'       reduce using rule 50 (expr4)
    ';'       [reduce using rule 51 (expr4)]
    ')'       reduce using rule 50 (expr4)
    ')'       [reduce using rule 51 (expr4)]
    ','       reduce using rule 50 (expr4)
    ','       [reduce using rule 51 (expr4)]
    $default  reduce using rule 50 (expr4)


state 106

   52 term: factor . '*' factor
   52     | factor '*' factor .
   53     | factor . '/' factor
   54     | factor .

    AND       reduce using rule 52 (term)
    AND       [reduce using rule 54 (term)]
    OR        reduce using rule 52 (term)
    OR        [reduce using rule 54 (term)]
    NEQ       reduce using rule 52 (term)
    NEQ       [reduce using rule 54 (term)]
    EQ        reduce using rule 52 (term)
    EQ        [reduce using rule 54 (term)]
    LEQ       reduce using rule 52 (term)
    LEQ       [reduce using rule 54 (term)]
    GEQ       reduce using rule 52 (term)
    GEQ       [reduce using rule 54 (term)]
    '<'       reduce using rule 52 (term)
    '<'       [reduce using rule 54 (term)]
    '>'       reduce using rule 52 (term)
    '>'       [reduce using rule 54 (term)]
    '+'       reduce using rule 52 (term)
    '+'       [reduce using rule 54 (term)]
    '-'       reduce using rule 52 (term)
    '-'       [reduce using rule 54 (term)]
    '*'       reduce using rule 52 (term)
    '*'       [reduce using rule 54 (term)]
    '/'       reduce using rule 52 (term)
    '/'       [reduce using rule 54 (term)]
    '^'       reduce using rule 52 (term)
    '^'       [reduce using rule 54 (term)]
    ';'       reduce using rule 52 (term)
    ';'       [reduce using rule 54 (term)]
    ')'       reduce using rule 52 (term)
    ')'       [reduce using rule 54 (term)]
    ','       reduce using rule 52 (term)
    ','       [reduce using rule 54 (term)]
    $default  reduce using rule 52 (term)


state 107

   52 term: factor . '*' factor
   53     | factor . '/' factor
   53     | factor '/' factor .
   54     | factor .

    AND       reduce using rule 53 (term)
    AND       [reduce using rule 54 (term)]
    OR        reduce using rule 53 (term)
    OR        [reduce using rule 54 (term)]
    NEQ       reduce using rule 53 (term)
    NEQ       [reduce using rule 54 (term)]
    EQ        reduce using rule 53 (term)
    EQ        [reduce using rule 54 (term)]
    LEQ       reduce using rule 53 (term)
    LEQ       [reduce using rule 54 (term)]
    GEQ       reduce using rule 53 (term)
    GEQ       [reduce using rule 54 (term)]
    '<'       reduce using rule 53 (term)
    '<'       [reduce using rule 54 (term)]
    '>'       reduce using rule 53 (term)
    '>'       [reduce using rule 54 (term)]
    '+'       reduce using rule 53 (term)
    '+'       [reduce using rule 54 (term)]
    '-'       reduce using rule 53 (term)
    '-'       [reduce using rule 54 (term)]
    '*'       reduce using rule 53 (term)
    '*'       [reduce using rule 54 (term)]
    '/'       reduce using rule 53 (term)
    '/'       [reduce using rule 54 (term)]
    '^'       reduce using rule 53 (term)
    '^'       [reduce using rule 54 (term)]
    ';'       reduce using rule 53 (term)
    ';'       [reduce using rule 54 (term)]
    ')'       reduce using rule 53 (term)
    ')'       [reduce using rule 54 (term)]
    ','       reduce using rule 53 (term)
    ','       [reduce using rule 54 (term)]
    $default  reduce using rule 53 (term)


state 108

   55 factor: expr5 . '^' expr5
   55       | expr5 '^' expr5 .
   56       | expr5 .

    '^'  shift, and go to state 77

    AND       reduce using rule 55 (factor)
    AND       [reduce using rule 56 (factor)]
    OR        reduce using rule 55 (factor)
    OR        [reduce using rule 56 (factor)]
    NEQ       reduce using rule 55 (factor)
    NEQ       [reduce using rule 56 (factor)]
    EQ        reduce using rule 55 (factor)
    EQ        [reduce using rule 56 (factor)]
    LEQ       reduce using rule 55 (factor)
    LEQ       [reduce using rule 56 (factor)]
    GEQ       reduce using rule 55 (factor)
    GEQ       [reduce using rule 56 (factor)]
    '<'       reduce using rule 55 (factor)
    '<'       [reduce using rule 56 (factor)]
    '>'       reduce using rule 55 (factor)
    '>'       [reduce using rule 56 (factor)]
    '+'       reduce using rule 55 (factor)
    '+'       [reduce using rule 56 (factor)]
    '-'       reduce using rule 55 (factor)
    '-'       [reduce using rule 56 (factor)]
    '*'       reduce using rule 55 (factor)
    '*'       [reduce using rule 56 (factor)]
    '/'       reduce using rule 55 (factor)
    '/'       [reduce using rule 56 (factor)]
    '^'       [reduce using rule 56 (factor)]
    ';'       reduce using rule 55 (factor)
    ';'       [reduce using rule 56 (factor)]
    ')'       reduce using rule 55 (factor)
    ')'       [reduce using rule 56 (factor)]
    ','       reduce using rule 55 (factor)
    ','       [reduce using rule 56 (factor)]
    $default  reduce using rule 55 (factor)


state 109

   66 function: function_name '(' arguments_opt . ')'

    ')'  shift, and go to state 116


state 110

   68 arguments_opt: arguments .
   70 arguments: arguments . ',' expression

    ','  shift, and go to state 113

    $default  reduce using rule 68 (arguments_opt)


state 111

   13 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 13 (statement)


state 112

   65 constructor: type '(' arguments ')' .

    $default  reduce using rule 65 (constructor)


state 113

   70 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    '-'      shift, and go to state 39
    '!'      shift, and go to state 40
    '('      shift, and go to state 41

    type           go to state 42
    expression     go to state 117
    variable       go to state 44
    unary_op       go to state 45
    expr1          go to state 46
    expr2          go to state 47
    expr3          go to state 48
    expr4          go to state 49
    term           go to state 50
    factor         go to state 51
    expr5          go to state 52
    constructor    go to state 53
    function       go to state 54
    function_name  go to state 55


state 114

   16 else_statement: ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 118
    variable   go to state 24


state 115

   12 statement: IF '(' expression ')' statement else_statement .

    $default  reduce using rule 12 (statement)


state 116

   66 function: function_name '(' arguments_opt ')' .

    $default  reduce using rule 66 (function)


state 117

   70 arguments: arguments ',' expression .

    $default  reduce using rule 70 (arguments)


state 118

   16 else_statement: ELSE statement .

    $default  reduce using rule 16 (else_statement)
